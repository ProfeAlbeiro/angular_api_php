/* Estructura de carpetas:
app/
|-- components/
|   |-- housing-location/
|   |   |-- housing-location.component.ts
|   |   |-- housing-location.component.html
|-- services/
|   |-- housing-location-service.ts
|-- models/
|   |-- housing-location.ts
|-- main.ts
*/

/* Modelo: housing-location.ts */
export interface HousingLocation {
  id?: number;
  name: string;
  city: string;
  state: string;
  photo: string;
  availableUnits: number;
  wifi: boolean;
  laundry: boolean;
}

/* Servicio: housing-location-service.ts */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { HousingLocation } from '../models/housing-location';

@Injectable({ providedIn: 'root' })
export class HousingLocationService {
  private apiUrl = 'http://tu-servidor.com/api/location.php';

  constructor(private http: HttpClient) {}

  getAllLocations(): Observable<any> {
    return this.http.get<any>(this.apiUrl);
  }

  createLocation(location: HousingLocation): Observable<any> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    return this.http.post<any>(this.apiUrl, location, { headers });
  }

  updateLocation(location: HousingLocation): Observable<any> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    return this.http.put<any>(this.apiUrl, location, { headers });
  }

  deleteLocation(id: number): Observable<any> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    return this.http.request<any>('DELETE', this.apiUrl, { body: { id }, headers });
  }
}

/* Componente: housing-location.component.ts */
import { Component, OnInit } from '@angular/core';
import { HousingLocationService, HousingLocation } from '../../services/housing-location-service';

@Component({
  selector: 'app-housing-location',
  standalone: true,
  templateUrl: './housing-location.component.html',
  styleUrls: ['./housing-location.component.css']
})
export class HousingLocationComponent implements OnInit {
  locations: HousingLocation[] = [];

  constructor(private housingLocationService: HousingLocationService) {}

  ngOnInit(): void {
    this.getLocations();
  }

  getLocations(): void {
    this.housingLocationService.getAllLocations().subscribe(
      response => this.locations = response.datos,
      error => console.error('Error al obtener las ubicaciones:', error)
    );
  }

  deleteLocation(id: number): void {
    this.housingLocationService.deleteLocation(id).subscribe(
      () => this.getLocations(),
      error => console.error('Error al eliminar la vivienda:', error)
    );
  }
}

/* Plantilla HTML: housing-location.component.html */
<nav>
  <a routerLink="/locations">Ver Ubicaciones</a>
</nav>

<router-outlet></router-outlet>

<div>
  <h2>Ubicaciones de Viviendas</h2>
  <ul>
    <li *ngFor="let location of locations">
      <h3>{{ location.name }} - {{ location.city }}, {{ location.state }}</h3>
      <p>Unidades disponibles: {{ location.availableUnits }}</p>
      <button (click)="deleteLocation(location.id!)">Eliminar</button>
    </li>
  </ul>
</div>

/* Bootstrap y rutas: main.ts */
import { bootstrapApplication } from '@angular/platform-browser';
import { provideHttpClient } from '@angular/common/http';
import { provideRouter, Routes } from '@angular/router';
import { HousingLocationComponent } from './components/housing-location/housing-location.component';

const routes: Routes = [
  { path: 'locations', component: HousingLocationComponent },
  { path: '', redirectTo: '/locations', pathMatch: 'full' }
];

bootstrapApplication(HousingLocationComponent, {
  providers: [provideHttpClient(), provideRouter(routes)]
});