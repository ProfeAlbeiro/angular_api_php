\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||------------------------------------------------------------------ APIREST EN PHP ------------------------------------------------------------------|||
|||--------------------------------------------------------------- Y CONSUMO EN ANGULAR ---------------------------------------------------------------|||
|||----------------------------------------------------------------------------------------------------------------------------------------------------|||
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|||                                                                                                                                                    ||| 
||| -- 01. Creación de la APIREST en PHP      (backend)                                                                                                |||
||| -- 02. Consumo de la APIREST con ANGULAR  (frontend)                                                                                               |||
|||                                                                                                                                                    ||| 
||| -- AUTOR: INSTRUCTOR ALBEIRO RAMOS. SENA, 2025                                                                                                     |||
|||                                                                                                                                                    ||| 
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||



|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|---------------------------------------------------------- 01. CREACIÓN DE LA APIREST EN PHP -----------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01. Estructura de carpetas --------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

        htdocs/                                                               #   Carpeta raíz del proyecto
          proyecto/                                                           #   Carpeta raíz del proyecto
            backend/                                                          #   Carpeta raíz del proyecto
            ├── config/                                                       #   Carpeta que contiene las configuraciones.
            │   └── DbConn.php                                                #    Configuración de la conexión a la base de datos.
            ├── controllers/                                                  #   Carpeta que contiene los controladores                        
            │   └── Locations.php                                             #   Controlador de Locations (APIREST)
            ├── models/                                                       #   Carpeta que contiene los modelos
            │   └── Location.php                                              #   Modelo de Datos del 'Location'            


        NOTA: Se debe crear la base de datos. Consulte el siguiente enlace:

              https://github.com/ProfeAlbeiro/api_php_angular/blob/main/sources/db/db.sql
              

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 02. models/locations.php ----------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

          01    <?php
          02        class Location {
          03            private $conn;
          04
          05            public function __construct() {
          06               $this->conn = DbConn::connection();
          07            }
          08
          09            public function getAllHousingLocations() {
          10                $stmt = $this->conn->query("SELECT * FROM locations");
          11                return $stmt->fetchAll(PDO::FETCH_ASSOC);
          12            }
          13
          14            public function getHousingLocationById($id) {
          15                $stmt = $this->conn->prepare("SELECT * FROM locations WHERE id = ?");
          16                $stmt->execute([$id]);
          17                return $stmt->fetch(PDO::FETCH_ASSOC);
          18            }
          19
          20            public function createHousingLocation($name, $city, $state, $photo, $availableUnits, $wifi, $laundry) {
          21                $stmt = $this->conn->prepare("INSERT INTO locations (name, city, state, photo, availableUnits, wifi, laundry)
          22                                                VALUES (?, ?, ?, ?, ?, ?, ?)");
          23                return $stmt->execute([$name, $city, $state, $photo, $availableUnits, $wifi, $laundry]);
          24            }
          25
          26            public function updateHousingLocation($id, $name, $city, $state, $photo, $availableUnits, $wifi, $laundry) {
          27                $stmt = $this->conn->prepare("UPDATE locations SET name = ?, city = ?, state = ?, photo = ?, availableUnits = ?, wifi = ?, laundry = ? WHERE id = ?");
          28                return $stmt->execute([$name, $city, $state, $photo, $availableUnits, $wifi, $laundry, $id]);
          29            }
          30
          31            public function deleteHousingLocation($id) {
          32                $stmt = $this->conn->prepare("DELETE FROM locations WHERE id = ?");
          33                return $stmt->execute([$id]);
          34            }
          35        }
          36    ?>

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 03. config/DbConn.php ----------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

          01.      <?php
                    class DbConn{
                        #  Conexión Local
                        public static function connection(){
                            try {
                                $hostname = "localhost";
                                $port = "3306";
                                $database = "db";
                                $username = "root";
                                $password = "";
                                $pdo = new PDO("mysql:host=$hostname;port=$port;dbname=$database;charset=utf8",$username,$password);
                                $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
                                return $pdo;
                            } catch (Exception $e) {
                                print "¡Error BD!: " . $e->getMessage() . "<br/>";
                                die();
                            }
                    }
                  }
                ?>










|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||
|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------- 02. PRUEBAS DE LA APIREST EN POSTMAN ---------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|||\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|||







|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01. Estructura de carpetas --------------------------------------------------------------------------------------------------------------------------|
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

        htdocs/                                                               
          proyecto/                                                           
            backend/                                                          
            ├── config/                                                       
            │   └── DbConn.php                                                
            ├── controllers/                                                  
            │   └── Locations.php                                             
            ├── models/                                                       
            │   └── Location.php
            frontend/                                                         
            └── src/                                                          #   Modelo de Datos del 'Location'
                └── app/                                                      #   Modelo de Datos del 'Location'
                    └── components/                                           #   Modelo de Datos del 'Location'
                    │   └── housing-location/                                 #   Modelo de Datos del 'Location'
                    │       ├── housing-location.component.ts                 #   Modelo de Datos del 'Location'
                    │       └── housing-location.component.html               #   Modelo de Datos del 'Location'
                    └── services/                                             #   Modelo de Datos del 'Location'
                    │   └── housing-location-service.ts                       #   Modelo de Datos del 'Location'
                    └── interfaces/                                           #   Modelo de Datos del 'Location'
                    │   └── housing-location.ts                               #   Modelo de Datos del 'Location'
                    └── main.ts                                               #   Modelo de Datos del 'Location'

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
/* Crear el Proyecto desde la carpeta raíz
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

--- 01. Desde el proyecto:

          PS ..> ng new app01

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
/* Crear las Interfaces, Servicios y Componentes
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

--- 01. Desde la Terminal:

          PS ..\app01> ng g i interfaces/housing-location
          PS ..\app01> ng g s services/housing-location
          PS ..\app01> ng g c components/housing-location

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
/* Inicio: src/main.ts */
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { routes } from './app/app.routes';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';

bootstrapApplication(AppComponent, {
  providers: [provideHttpClient(), provideRouter(routes)]
})
  .catch((err) => console.error(err));

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
/* Componente Principal (.ts): src/app/app.component.ts */
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

import { Component } from '@angular/core';
import { RouterOutlet, RouterModule } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet, RouterModule],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'app01';
}

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
/* Componente Principal (.html): src/app/app.component.html */
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

<main class="main"> 
    <router-outlet />  
</main>

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
/* Rutas: src/app/app.routes.ts */
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

import { Routes } from '@angular/router';
import { HousingLocationComponent } from './components/housing-location/housing-location.component';

export const routes: Routes = [
    { path: 'locations', component: HousingLocationComponent },
    { path: '', redirectTo: '/locations', pathMatch: 'full' }
];


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
/* Interfaz: housing-location.ts */
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

export interface HousingLocation {
  id?: number;
  name: string;
  city: string;
  state: string;
  photo: string;
  availableUnits: number;
  wifi: boolean;
  laundry: boolean;
}


|--------------------------------------------------------------------------------------------------------------------------------------------------------|
/* Servicio: housing-location-service.ts */
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { HousingLocation } from '../interfaces/housing-location';

@Injectable({ providedIn: 'root' })
export class HousingLocationService {
  private apiUrl = 'http://localhost/api_php/api_php_03_prac_location/controllers/Locations.php';

  constructor(private http: HttpClient) {}

  getAllLocations(): Observable<any> {
    return this.http.get<any>(this.apiUrl);
  }

  createLocation(location: HousingLocation): Observable<any> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    return this.http.post<any>(this.apiUrl, location, { headers });
  }

  updateLocation(location: HousingLocation): Observable<any> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    return this.http.put<any>(this.apiUrl, location, { headers });
  }

  deleteLocation(id: number): Observable<any> {
    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    return this.http.request<any>('DELETE', this.apiUrl, { body: { id }, headers });
  }
}

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
/* Componente: housing-location.component.ts */
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

import { Component, OnInit } from '@angular/core';
import { HousingLocationService, HousingLocation } from '../../services/housing-location-service';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-housing-location',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './housing-location.component.html',
  styleUrls: ['./housing-location.component.css']
})
export class HousingLocationComponent implements OnInit {
  locations: HousingLocation[] = [];

  constructor(private housingLocationService: HousingLocationService) {}

  ngOnInit(): void {
    this.getLocations();
  }

  getLocations(): void {
    this.housingLocationService.getAllLocations().subscribe(
      response => {
        console.log('Respuesta de la API:', response); // <-- Aquí agregamos el console.log
        this.locations = response.datos;
      },
      error => console.error('Error al obtener las ubicaciones:', error)
    );
  }

  deleteLocation(id: number): void {
    this.housingLocationService.deleteLocation(id).subscribe(
      () => this.getLocations(),
      error => console.error('Error al eliminar la vivienda:', error)
    );
  }
}

|--------------------------------------------------------------------------------------------------------------------------------------------------------|
/* Plantilla HTML: housing-location.component.html */
|--------------------------------------------------------------------------------------------------------------------------------------------------------|

<nav>
  <a routerLink="/locations">Ver Ubicaciones</a>
</nav>

<div>
  <h2>Ubicaciones de Viviendas</h2>
  <ul>
    <li *ngFor="let location of locations">
      <h3>{{ location.name }} - {{ location.city }}, {{ location.state }}</h3>
      <p>Unidades disponibles: {{ location.availableUnits }}</p>
      <!-- <button (click)="deleteLocation(location.id!)">Eliminar</button> -->
    </li>
  </ul>
</div>



|--------------------------------------------------------------------------------------------------------------------------------------------------------|
|-- 01. Estructura de carpetas                                                                                                                           |
|--------------------------------------------------------------------------------------------------------------------------------------------------------|